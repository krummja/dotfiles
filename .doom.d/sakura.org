#+TITLE:    Sakura
#+AUTHOR:   Jonathan Crum

* Table of Contents :TOC_4_gh:
- [[#doom-configuration][DOOM Configuration]]
  - [[#init][Init]]
    - [[#about-this-file][About this file]]
    - [[#file-options][File Options]]
    - [[#doom-modules][Doom Modules]]
  - [[#packages--config][Packages & Config]]
    - [[#file-options-1][File Options]]
      - [[#packages][Packages]]
      - [[#config][Config]]
    - [[#config-user-data][Config User Data]]
    - [[#config-user-constants][Config User Constants]]
    - [[#doom-modules-1][DOOM Modules]]
      - [[#deft][Deft]]
    - [[#additional-packages][Additional Packages]]
      - [[#helm-bibtex][+Helm Bibtex]]
      - [[#org-ref][+Org-Ref]]
      - [[#org-roam][+Org-Roam]]
      - [[#org-roam-bibtex][+Org-Roam-Bibtex]]
      - [[#org-noter][+Org-Noter]]
      - [[#pdfgrep][+PDFgrep]]
      - [[#pdf-tools][+PDF-Tools]]
      - [[#zotxt][+Zotxt]]
  - [[#theming][Theming]]

* DOOM Configuration
** Init
*** About this file
#+BEGIN_QUOTE
This file controls what Doom modules are enabled and what order they load in. Remember to run 'doom sync' after modifying it!

NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's documentation. There you'll find a "Module Index" link where you'll find a comprehensive list of Doom's modules and what flags they support.

NOTE Move your cursor over a module's name (or its flags) and press 'K' (or 'C-c c k' for non-vim users) to view its documentation. This works on flags as well (those symbols that start with a plus). Alternatively, press 'gd' (or 'C-c c d') on a module to browse its directory (for easy access to its source code).
#+END_QUOTE

*** File Options
Use lexical-binding. [[https://nullprogram.com/blog/2016/12/22/][Why?]]

#+BEGIN_QUOTE
Until Emacs 24.1 (June 2012), Elisp only had dynamically scoped variables, a feature, mostly by accident, common to old lisp dialects. While dynamic scope has some selective uses, itâ€™s widely regarded as a mistake for local variables, and virtually no other languages have adopted it.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle "./init.el"
;;; init.el -*- lexical-binding: t; -*-
#+END_SRC

*** Doom Modules
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
(doom! :input
       ;;chinese
       ;;japanese

       :completion
       company           ; the ultimate code completion backend
       helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life

       :ui
       deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;pretty-code       ; ligatures or substitute text with pretty symbols
       ;;tabs              ; an tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;spell             ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       ;;lsp
       ;;macos             ; MacOS-specific commands
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :lang
       ;;agda              ; types of types of types of types...
       ;;cc                ; C/C++/Obj-C madness
       clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp           ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ;
       ;;json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       ;;yaml              ; JSON, but readable

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))

#+END_SRC

** Packages & Config
*** File Options
**** Packages
#+BEGIN_SRC emacs-lisp :tangle "./packages.el"
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+END_SRC

**** Config
#+BEGIN_SRC emacs-lisp :tangle "./config.el"
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC
*** Config User Data
#+BEGIN_SRC emacs-lisp :tangle "./config.el"
(setq user-full-name "Jonathan Crum"
      user-mail-address "crumja@uga.edu")
#+END_SRC

*** Config User Constants
#+BEGIN_SRC emacs-lisp :tangle "./config.el"
(setq
    NOTEBOOK      (concat (getenv "HOME") "/Notebook/")
    BIBLIOGRAPHY  (concat (getenv "HOME") "/texmf/bibtex/bib/master.bib")
    org-directory         NOTEBOOK
    deft-directory        NOTEBOOK
    org-roam-directory    NOTEBOOK
    )
#+END_SRC

*** DOOM Modules
**** Deft
***** Configuration
#+BEGIN_SRC emacs-lisp :tangle "./config.el"
;; Deft
(use-package deft
  :commands deft
  :init
  (setq deft-default-extension "org"
        deft-use-filename-as-title nil
        deft-use-filter-string-for-filename t
        deft-auto-save-interval -1.0
        deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase)))
  :config
  (add-to-list 'deft-extensions "tex"))
#+END_SRC

*** Additional Packages
**** +Helm Bibtex
***** Declaration
#+BEGIN_SRC emacs-lisp :tangle "./packages.el"
(package! helm-bibtex)
#+END_SRC
***** Configuration
#+BEGIN_SRC emacs-lisp :tangle "./config.el"
;; Helm Bibtex
(setq
    bibtex-completion-notes-path    NOTEBOOK
    bibtex-completion-bibliography  BIBLIOGRAPHY
    bibtex-completion-pdf-field     "file"
    bibtex-completion-notes-template-multiple-files
    (concat
        "#+TITLE: ${title}\n"
        "#+ROAM_KEY: cite:${=key}\n"
        "* TODO Notes\n"
        ":PROPERTIES:\n"
        ":Custom_ID: ${=key=}\n"
        ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
        ":AUTHOR: ${author-abbrev}\n"
        ":JOURNAL: ${journaltitle}\n"
        ":DATE: ${date}\n"
        ":YEAR: ${year}\n"
        ":DOI: ${doi}\n"
        ":URL: ${url}\n"
        ":END:\n\n"))
#+END_SRC

**** +Org-Ref
***** Declaration
#+BEGIN_SRC emacs-lisp :tangle "./packages.el"
(package! org-ref)
#+END_SRC
***** Configuration
#+BEGIN_SRC emacs-lisp :tangle "./config.el"
;; Org-Ref
(use-package org-ref
    :config
    (setq
        org-ref-completion-library 'org-ref-ivy-cite
        org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
        org-ref-default-bibliography (list BIBLIOGRAPHY)
        org-ref-bibliography-notes (concat (NOTEBOOK) "/bibnotes.org")
        org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n :Custom_ID: %k\n :NOTER_DOCUMENT: %f\n :ROAM_KEY: cite:%k\n :AUTHOR: %9a\n :JOURNAL: %j\n :YEAR: %y\n :VOLUME: %v\n :PAGES: %p\n :DOI: %D\n :URL: %U\n :END:\n\n"))
#+END_SRC

**** +Org-Roam
***** Declaration
#+BEGIN_SRC emacs-lisp :tangle "./packages.el"
(package! org-roam)
#+END_SRC
***** Configuration
#+BEGIN_SRC emacs-lisp :tangle "./config.el"
;; Org-Roam
(use-package org-roam
    :hook (org-load .org-roam-mode)
    :commands (org-roam-buffer-toggle-display
               org-roam-find-file
               org-roam-graph
               org-roam-insert
               org-roam-switch-to-buffer
               org-roam-dailies-date
               org-roam-dailies-today
               org-roam-dailies-tomorrow
               org-roam-dailies-yesterday)
    :preface
    ;; Set this to nil so we can later detect whether the user has set a custom
    ;; directory for it, and default to `org-directory' if they haven't.
    (defvar org-roam-directory nil)
    :init
    :config
    (setq org-roam-directory (expand-file-name (or org-roam-directory "roam")
                                               org-directory)
          org-roam-verbose nil
          org-roam-buffer-no-delete-other-windows t
          org-roam-completion-system 'default

          (add-hook 'find-file-hook
                    (defun +org-roam-open-buffer-maybe-h ()
                      (and +org-roam-open-buffer-on-find-file
                           (memq 'org-roam-buffer--update-maybe post-command-hook)
                           (not (window-parameter nil 'window-side))
                           (not (eq 'visible (org-roam-buffer--visibility)))
                           (with-current-buffer (window-buffer)
                             (org-roam-buffer--get-create)))))

          (add-hook 'org-roam-buffer-prepare-hook #'hide-mode-line-mode))

(use-package org-roam-protocol
    :after org-protocol)

(use-package company-org-roam
    :after org-roam
    :config
    (set-company-backend! 'org-mode '(company-org-roam company-yasnippet company-dabbrev)))
#+END_SRC

**** +Org-Roam-Bibtex
***** Declaration
#+BEGIN_SRC emacs-lisp :tangle "./packages.el"
(package! org-roam-bibtex)
#+END_SRC

***** Configuration
#+BEGIN_SRC emacs-lisp :tangle "./config.el"
(use-package org-roam-bibtex
    :after (org-roam)
    :hook (org-roam-mode . org-roam-bibtex-mode)
    :config
    (setq org-roam-bibtex-preformat-keywords
          '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
    (setq orb-templates
          '(("r" "ref" plain (function org-roam-capture--get-point)
             ""
             :file-name "${slug}"
             :head "#+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}

- tags ::
- keywords :: ${keywords}

\n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"

           :unnarrowed t))))
#+END_SRC

**** +Org-Noter
***** Declaration
#+BEGIN_SRC emacs-lisp :tangle "./packages.el"
(package! org-noter)
#+END_SRC
***** Configuration
#+BEGIN_SRC emacs-lisp :tangle "./config.el"
;; Org-Noter
(use-package org-noter
    :after (:any org pdf-view)
    :config
    (setq
        org-noter-notes-window-location 'other-frame
        org-noter-always-create-frame nil
        org-noter-hide-other nil
        org-noter-notes-search-path (list NOTEBOOK)))
#+END_SRC

**** +PDFgrep
***** Declaration
#+BEGIN_SRC emacs-lisp :tangle "./packages.el"
(package! pdfgrep)
#+END_SRC
***** Configuration
#+BEGIN_SRC emacs-lisp :tangle "./config.el"
;; PDFgrep
#+END_SRC

**** +PDF-Tools
***** Declaration
#+BEGIN_SRC emacs-lisp :tangle "./packages.el"
(package! pdf-tools)
#+END_SRC
***** Configuration
#+BEGIN_SRC emacs-lisp :tangle "./config.el"
;; PDF-Tools
#+END_SRC

**** +Zotxt
***** Declaration
#+BEGIN_SRC emacs-lisp :tangle "./packages.el"
(package! zotxt)
#+END_SRC
***** Configuration
#+BEGIN_SRC emacs-lisp :tangle "./config.el"
;; Zotxt
#+END_SRC

** Theming
#+BEGIN_SRC emacs-lisp :tangle "./config.el"
(setq doom-font (font-spec :family "Fira Code" :size 10))
(setq doom-theme 'doom-one)

(setq display-line-numbers-type t)
#+END_SRC
